name: Build Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VAR_NAMES: NEXT_PUBLIC_API_BASE_URL APP_PORT API_URL
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
  APP_PORT: ${{ secrets.APP_PORT }}
  API_URL: ${{ secrets.API_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Cache Docker layers
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Debug Logs
        run: ls

      - name: Build Docker images with Docker Compose
        run: |
          docker compose -f docker-compose.prod.yml build

      - name: Initialize Docker Swarm
        run: docker swarm init

      - name: Write secrets to files
        run: |
          mkdir -p secrets
          for key in $VAR_NAMES; do
            value="${!key}"
            echo "$value" > "secrets/${key,,}.txt"
          done

      - name: Run Docker Stack Deploy
        run: |
          docker stack deploy -c docker-compose.prod.yml prod

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Logging Docker Services
        run: |
          echo "üß© Listing Docker services..."
          docker service ls

      - name: Check service logs for frontend
        run: |
          echo "üîç Checking logs for frontend (prod_app)..."
          logs=$(docker service logs prod_app)
          echo "$logs"

      - name: Check service logs for backend
        run: |
          echo "üîç Checking logs for backend (prod_api)..."
          logs=$(docker service logs prod_api)
          echo "$logs"

      - name: Check if all services are running
        run: |
          echo "üîç Checking if all services are running..."

          services=$(docker stack services prod --format '{{.Name}} {{.Replicas}}')

          failed=0

          while read name replicas; do
            desired=$(echo "$replicas" | cut -d/ -f2)
            running=$(echo "$replicas" | cut -d/ -f1)

            echo "üîß Service: $name | Running: $running | Desired: $desired"

            if [ "$running" != "$desired" ]; then
              echo "‚ùå Service $name is not fully running ($running/$desired)"
              failed=1
            fi
          done <<< "$services"

          if [ "$failed" -eq 1 ]; then
            echo "‚ùå One or more services failed to reach desired state."
            exit 1
          else
            echo "‚úÖ All services are running."
          fi

      # Uncomment for debugging
      # - name: SSH into runner (tmate session)
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true
      #   timeout-minutes: 30

      - name: Close Docker Setup
        run: |
          ./scripts/prod/down/volume.sh
          ./scripts/prod/stop/prod.sh

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images to GHCR
        run: |
          docker compose -f docker-compose.prod.yml push
