name: Build Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VAR_NAMES: NEXT_PUBLIC_API_BASE_URL APP_PORT API_URL
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
  APP_PORT: ${{ secrets.APP_PORT }}
  API_URL: ${{ secrets.API_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Cache Docker layers
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Debug Logs
        run: ls

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images with Docker Compose
        run: |
          docker compose -f docker-compose.prod.yml build

      - name: Push Docker images to GHCR
        run: |
          docker compose -f docker-compose.prod.yml push

      # - name: Initialize Docker Swarm
      #   run: docker swarm init

      # - name: Write secrets to files
      #   run: |
      #     mkdir -p secrets
      #     for key in $VAR_NAMES; do
      #       value="${!key}"
      #       echo "$value" > "secrets/${key,,}.txt"
      #     done

      # - name: Run Docker Stack Deploy
      #   run: |

      # - name: Wait for 60 seconds
      #   run: sleep 60

      # - name: Logging Docker Services
      #   run: |
      #     echo "üß© Listing Docker services..."
      #     docker service ls

      # - name: Check service logs for frontend
      #   run: |
      #     echo "üîç Checking logs for frontend (prod_app)..."
      #     docker service logs prod_app | tee /tmp/frontend_logs.txt

      #     if ! [ -s /tmp/frontend_logs.txt ]; then
      #       echo "‚ùå No logs found for frontend (prod_app)"
      #       exit 1
      #     fi

      # - name: Check service logs for backend
      #   run: |
      #     echo "üîç Checking logs for backend (prod_api)..."
      #     docker service logs prod_api | tee /tmp/backend_logs.txt

      #     if ! [ -s /tmp/backend_logs.txt ]; then
      #       echo "‚ùå No logs found for backend (prod_api)"
      #       exit 1
      #     fi
